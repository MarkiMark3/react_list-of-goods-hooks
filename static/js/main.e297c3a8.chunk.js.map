{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","sortField","setSortField","isReverseField","setReverseField","visibleGoods","goods","prepGoods","sort","good1","good2","length","alpha","localeCompare","reverse","getGoods","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAuBKA,E,0EAlBQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAQGD,K,gBAAAA,E,uBAAAA,M,KA4BE,IAAME,EAAgB,WAC3B,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0CF,oBAAS,GAAnD,mBAAOG,EAAP,KAAuBC,EAAvB,KACMC,EA1BR,SAAkBC,EAAlB,GAA4E,IAAvCL,EAAsC,EAAtCA,UAAWE,EAA2B,EAA3BA,eACxCI,EAAS,YAAOD,GAmBtB,OAjBIL,GACFM,EAAUC,MAAK,SAACC,EAAOC,GACrB,OAAQT,GACN,KAAKJ,EAASc,OACZ,OAAOF,EAAME,OAASD,EAAMC,OAC9B,KAAKd,EAASe,MACZ,OAAOH,EAAMI,cAAcH,GAC7B,QACE,OAAO,MAKXP,GACFI,EAAUO,UAGLP,EAMcQ,CAASjB,EAAiB,CAAEG,YAAWE,mBAM5D,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,CACE,iBAAkBjB,IAAcJ,EAASe,MACzC,0BAA2BX,IAAcJ,EAASe,QAGtDO,QAAS,WACPjB,EAAaL,EAASe,QAT1B,iCAeA,wBACEK,KAAK,SACLD,UAAWE,IACT,CACE,oBAAqBjB,IAAcJ,EAASc,OAC5C,6BAA8BV,IAAcJ,EAASc,SAGzDQ,QAAS,WACPjB,EAAaL,EAASc,SAT1B,4BAeA,wBACEM,KAAK,SACLD,UAAWE,IACT,CACE,oBAAqBf,EACrB,8BAAiD,IAAnBA,IAGlCgB,QAAS,WACPf,GAAiBD,IATrB,qBAeCA,GAAkBF,EAEf,wBACEgB,KAAK,SACLD,UAAU,4BACVG,QA1DS,WACnBf,GAAgB,GAChBF,EAAa,KAqDL,mBAQA,QAGN,6BACE,6BACGG,EAAae,KAAI,SAAAC,GAAI,OACpB,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,cC1HnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e297c3a8.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ninterface Sorting {\n  sortField: string,\n  isReverseField?: boolean\n}\n\nenum SortType {\n  length = 'length',\n  alpha = 'alpabetically',\n}\n\nfunction getGoods(goods: string[], { sortField, isReverseField }: Sorting) {\n  const prepGoods = [...goods];\n\n  if (sortField) {\n    prepGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortType.length:\n          return good1.length - good2.length;\n        case SortType.alpha:\n          return good1.localeCompare(good2);\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReverseField) {\n    prepGoods.reverse();\n  }\n\n  return prepGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReverseField, setReverseField] = useState(false);\n  const visibleGoods = getGoods(goodsFromServer, { sortField, isReverseField });\n  const resetSorting = () => {\n    setReverseField(false);\n    setSortField('');\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            {\n              'button is-info': sortField === SortType.alpha,\n              'button is-info is-light': sortField !== SortType.alpha,\n            },\n          )}\n          onClick={() => {\n            setSortField(SortType.alpha);\n          }}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            {\n              'button is-success': sortField === SortType.length,\n              'button is-success is-light': sortField !== SortType.length,\n            },\n          )}\n          onClick={() => {\n            setSortField(SortType.length);\n          }}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            {\n              'button is-warning': isReverseField,\n              'button is-warning is-light': isReverseField === false,\n            },\n          )}\n          onClick={() => {\n            setReverseField(!isReverseField);\n          }}\n        >\n          Reverse\n        </button>\n\n        {isReverseField || sortField\n          ? (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={resetSorting}\n            >\n              Reset\n            </button>\n          )\n          : null}\n      </div>\n\n      <ul>\n        <ul>\n          {visibleGoods.map(good => (\n            <li\n              key={good}\n              data-cy=\"Good\"\n            >\n              {good}\n            </li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}